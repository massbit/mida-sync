name: CI

on: [push]

env:
    NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    NODE_VERSION: '16'

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            - name: Check out repository code
              uses: actions/checkout@v3
            - uses: actions/setup-node@v2.5.1
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: true
            - name: Install dependecies
              run: |
                  echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
                  yarn install --ignore-engines
                  rm .npmrc
            - name: Build typescript
              run: |
                  yarn dist
            - name: Install 1Password CLI
              uses: 1password/install-cli-action@v1
              with:
                  version: 2.18.0
            - name: Get 1Password Secrets
              run: op read op://sviluppo/rm-cms-sync-env/production > .env
              working-directory: ./dist
              env:
                  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            - name: Check code format
              run: |
                  yarn format
            - name: Check code lint
              run: |
                  yarn lint

    publish-on-production:
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        runs-on: ubuntu-latest
        needs: [build-and-test]
        steps:
            - name: Check out repository code
              uses: actions/checkout@v3
            - uses: actions/setup-node@v2.5.1
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  check-latest: true
            - name: Install dependecies
              run: |
                  echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
                  yarn install --ignore-engines
                  rm .npmrc
            - name: Build typescript
              run: |
                  yarn dist
            - name: Install 1Password CLI
              uses: 1password/install-cli-action@v1
              with:
                  version: 2.18.0
            - name: Get 1Password Secrets
              run: op read op://sviluppo/rm-cms-sync-env/production > .env
              working-directory: ./dist
              env:
                  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            - name: get runner ip address
              id: ip
              uses: haythem/public-ip@v1.2
            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.RM_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.RM_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-1
            - name: whitelist runner ip address
              run: |
                  aws ec2 authorize-security-group-ingress \
                    --group-id ${{ secrets.RM_SECURITY_GROUP_ID }} \
                    --protocol tcp \
                    --port 22 \
                    --cidr ${{ steps.ip.outputs.ipv4 }}/32
            - name: Copy dist folder to the server
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.SSH_RM_IP }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_RM_KEY }}
                  strip_components: 1
                  source: 'dist/*'
                  target: 'services/cms-sync'
            - name: Update server service
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SSH_RM_IP }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_RM_KEY }}
                  script: |
                      cd services/cms-sync
                      nvm use
                      pm2 restart ecosystem.config.js --env production --only [3200]PRODUCTION-rm-cms-sync
            - name: revoke runner ip address
              run: |
                  aws ec2 revoke-security-group-ingress \
                    --group-id ${{ secrets.RM_SECURITY_GROUP_ID }} \
                    --protocol tcp \
                    --port 22 \
                    --cidr ${{ steps.ip.outputs.ipv4 }}/32
